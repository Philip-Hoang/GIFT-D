{"version":3,"sources":["Components/NavBar/TopNavBar.jsx","Components/Commons/LoadSpinner.jsx","allRoutes.js","Components/LandingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["TopNavBar","props","state","goToLogo","bind","goToAboutUs","goToReviews","goToSignUp","console","log","this","history","push","pathname","page","Fragment","className","type","onClick","id","Component","withRouter","LoadSpinner","style","Spinner","animation","variant","allRoutes","path","exact","roles","component","lazy","LandingPage","fallback","map","route","idx","key","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a7e989f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass TopNavBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.goToLogo = this.goToLogo.bind(this);\r\n    this.goToAboutUs = this.goToAboutUs.bind(this);\r\n    this.goToReviews = this.goToReviews.bind(this);\r\n    this.goToSignUp = this.goToSignUp.bind(this);\r\n  }\r\n\r\n  goToLogo() {\r\n    console.log(\"go to logo\");\r\n    // this.props.history.push(\"/\");\r\n    this.props.history.push({\r\n      pathname: \"/\",\r\n      state: { page: 1 },\r\n    });\r\n  }\r\n  goToAboutUs() {\r\n    console.log(\"go to About Us\");\r\n    this.props.history.push(\"/aboutus\");\r\n  }\r\n  goToReviews() {\r\n    console.log(\"go to Reviews\");\r\n    this.props.history.push(\"/reviews\");\r\n  }\r\n  goToSignUp() {\r\n    console.log(\"go to Sign Up\");\r\n    this.props.history.push(\"/signup\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-white m-5\">\r\n          <span\r\n            type=\"none\"\r\n            className=\"link-button logo\"\r\n            onClick={this.goToLogo}\r\n          >\r\n            GIFT'D\r\n          </span>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\"></ul>\r\n            <ul className=\"navbar-nav\">\r\n              <span\r\n                type=\"none\"\r\n                className=\"link-button about-us\"\r\n                onClick={this.goToAboutUs}\r\n              >\r\n                About us\r\n              </span>\r\n\r\n              <span\r\n                type=\"none\"\r\n                className=\"link-button reviews\"\r\n                onClick={this.goToReviews}\r\n              >\r\n                Reviews\r\n              </span>\r\n\r\n              <span\r\n                type=\"none\"\r\n                className=\"link-button sign-up\"\r\n                onClick={this.goToSignUp}\r\n              >\r\n                Sign Up\r\n              </span>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(TopNavBar);\r\n","import React, { Component } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nclass LoadSpinner extends Component {\r\n  state = {\r\n    style: {},\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <>\r\n          <Spinner animation=\"border\" variant=\"primary\" />\r\n          <Spinner animation=\"border\" variant=\"secondary\" />\r\n          <Spinner animation=\"border\" variant=\"success\" />\r\n          <Spinner animation=\"border\" variant=\"danger\" />\r\n          <Spinner animation=\"border\" variant=\"warning\" />\r\n          <Spinner animation=\"border\" variant=\"info\" />\r\n          <Spinner animation=\"border\" variant=\"light\" />\r\n          <Spinner animation=\"border\" variant=\"dark\" />\r\n          <Spinner animation=\"grow\" variant=\"primary\" />\r\n          <Spinner animation=\"grow\" variant=\"secondary\" />\r\n          <Spinner animation=\"grow\" variant=\"success\" />\r\n          <Spinner animation=\"grow\" variant=\"danger\" />\r\n          <Spinner animation=\"grow\" variant=\"warning\" />\r\n          <Spinner animation=\"grow\" variant=\"info\" />\r\n          <Spinner animation=\"grow\" variant=\"light\" />\r\n          <Spinner animation=\"grow\" variant=\"dark\" />\r\n        </>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadSpinner;\r\n","import { lazy } from \"react\";\r\n\r\nconst allRoutes = [\r\n  {\r\n    path: \"/\",\r\n    exact: true,\r\n    roles: true,\r\n    component: lazy(() => import(\"./Components/GiveGifts/GiveGifts\")),\r\n  },\r\n  {\r\n    path: \"/GIFT-D\",\r\n    exact: true,\r\n    roles: true,\r\n    component: lazy(() => import(\"./Components/GiveGifts/GiveGifts\")),\r\n  },\r\n  {\r\n    path: \"/aboutus\",\r\n    exact: true,\r\n    roles: true,\r\n    component: lazy(() => import(\"./Components/UnderConstruction\")),\r\n  },\r\n  {\r\n    path: \"/reviews\",\r\n    exact: true,\r\n    roles: true,\r\n    component: lazy(() => import(\"./Components/UnderConstruction\")),\r\n  },\r\n  {\r\n    path: \"/signup\",\r\n    exact: true,\r\n    roles: true,\r\n    component: lazy(() => import(\"./Components/UnderConstruction\")),\r\n  },\r\n];\r\nexport default allRoutes;\r\n","import React, { Component, Suspense } from \"react\";\r\nimport TopNavBar from \"./NavBar/TopNavBar\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport LoadSpinner from \"./Commons/LoadSpinner\";\r\nimport allRoutes from \"../allRoutes\";\r\n\r\nclass LandingPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  allRoutes = () => {\r\n    return (\r\n      <Suspense fallback={<LoadSpinner />}>\r\n        <Switch>\r\n          {allRoutes.map((route, idx) => (\r\n            <Route key={idx + 1} {...route} />\r\n          ))}\r\n        </Switch>\r\n      </Suspense>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"ml-5 mr-5\">\r\n          <TopNavBar />\r\n          {this.allRoutes()}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default LandingPage;\r\n","import React from \"react\";\r\n// import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport LandingPage from \"./Components/LandingPage\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <LandingPage />\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//\r\n//to add new code run the following line -- npm run deploy\r\n// /https://medium.com/better-programming/how-to-host-your-react-app-on-github-pages-for-free-919ad201a4cb\r\n// https://philip-hoang.github.io/GIFT-D/\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// https://xd.adobe.com/view/b0594c2a-a4f4-4240-a252-d4d4a08d40e4-e50a/\r\n"],"sourceRoot":""}